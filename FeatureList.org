#+SETUPFILE: ~/.emacs.d/elpa/org-html-themes-master/setup/theme-bigblow.setup
#+AUTHOR:Joshua Dunbrack
#+EMAIL:joshuadunbrack@gmail.com
#+LANGUAGE: en
#+TITLE: Hacknet Extensions Guide, Beautified
#+OPTIONS: email:t todo:nil ^:nil \n:t H:5 num:nil
#+EXPORT_FILE_NAME: index.html
* Document Notes
  The raw XML has been modified (reformatted manually) to fit within 80 characters.
  There are no guarantees that it still works, and may have different newlines than intended.
  As such, use the provided custom templates or the pastebin links as a starting point rather than the inline XML.
* DONE HacknetExtension
  Each categorized entry represents a child element of HacknetExtension.
  Any included options are text inside of the element.
** General Info
*** Language
    The language of the extension.
    + English: en-us
    + German: de-de
    + French: fr-be
    + Russian: ru-ru
    + Spanish: es-ar
    + Korean: ko-kr
    + Japanese: ja-jp
    + Chinese, simplified: zh-cn
*** Name
    The name of the extension, as displayed in-game.
*** Description
    The description of the extension as displayed in Hacknet - multi-line is allowed.
*** AllowSaves
    Whether or not the player can choose to save.
** Initial Setup
*** StartingVisibleNodes
    A comma-separated list of nodes representing the visible nodes at the start.
*** StartingMission
    An (optional) filepath to the starting mission xml file.
*** StartingActions
    A filepath to the actions performed at the start of the extension.
*** IntroStartupSong
    The name of the song played at the start of the game.
    Original songs need only their name (e.g. "The_Quickening").
    Custom songs need Path/Name
*** StartsWithTutorial
    Whether or not the tutorial runs at the start of the extension.
*** StartingTheme
    A filepath to the theme that the player starts with. 
**** Built-In Theme Names
     + TerminalOnlyBlack
     + HacknetBlue
     + HacknetTeal
     + HacknetYellow
     + HacknetGreen
     + HacknetWhite
     + HacknetPurple
     + HacknetMint
*** HasIntroStartup
    Whether or not the computer boot sequence occur at the start of the extension.
*** Faction
    A filepath to the faction files involved in the extension.
    Multiple factions tags are supported.
** Sequencer Flags
   When run, ExtensionSequencer.exe activates if player has SequencerFlagRequiredForStart.
   The player autoconnects to SequencerTargetID after SequencerSpinUpTime seconds.
   It will load in the conditional action file in ActionsToRunOnSequencerStart.
   However, the ActionsToRunOnSequencerStart activate instantly.
   Remember to delay any relevant actions in the set specified by the song intro you define!
*** SequencerFlagRequiredForStart
    The flag that the player must have for the sequencer to be able to start.
*** SequencerTargetID
    The computer that running the sequencer will connect to.
*** SequencerSpinUpTime
    How long the sequencer must spin up before connecting to the computer.
*** ActionsToRunOnSequencerStart
    A filepath to an xml file containing actions run *when sequencer starts to run*, not when it connects.
** Workshop
*** WorkshopDescription
    The description of the extension in the Steam workshop.
    Maximum of 8000 characters
    Newlines supported
*** WorkshopLanguage
    What language it is in the workshop.
    List of options unknown - "English" is definitely one, though.
*** WorkshopVisibility
    The visibility of the extension in the workshop.
    0: Public
    1: Friends Only  
    2: Private (Self Only)  
*** WorkshopTags
    A comma-separated list of workshop tags supported for the extension.
    The only existing tag is Extension, so use that.
*** WorkshopPreviewImagePath
    The image used for the extension in the workshop.
    It must be square, in extension folder, and <1MB. Steam will auto-resize the provided image.
    Steam supports .png, .jpg, and .gif
*** WorkshopPublishID
    The ID of the extension on the workshop.
    Start this with the value of NONE
    After you first publish, this is auto-filled by the Steam ID.
    Make sure to use that same ID afterwards to update the extension rather than creating a copy!
** Example
   Pastebin Link: https://pastebin.com/6fc1fpJn
   Simplified Contents:
   #+BEGIN_SRC nxml
     <HacknetExtension>
       <Language>en-us</Language>

       <!-- Max name length is 128 characters -->
       <Name>Intro Extension</Name>
       <AllowSaves>true</AllowSaves>

       <!-- a comma separated list of notes that start out as being visible-->
       <StartingVisibleNodes>advExamplePC</StartingVisibleNodes>

       <!-- Optional -->
       <StartingMission>Missions/Intro/IntroMission1.xml</StartingMission>

       <!--
       Conditional action set that is loaded in as soon as a new session is created
       This is useful to do setup stuff, like giving the player programs, assigning
       them a faction etc.
       If you don't need this, set it to "NONE", or just delete the tag.-->
       <StartingActions>Actions/StartingActions.xml</StartingActions>

       <!-- Description that appears within Hacknet -->
       <Description> --- Intro Extension ---
     This example extension will teach the basics of building a Hacknet Extension.
     Descriptions can be multiple lines, so, we're learning already!</Description>

       <!-- Factions involved in this extension!
	    You can define as many or as few as you like -->
       <Faction>Factions/ExampleFaction.xml</Faction>
       <Faction>Factions/IntroFaction.xml</Faction>

       <StartsWithTutorial>False</StartsWithTutorial>

       <!-- Makes the extension start with the standard restart bootup sequence -->
       <HasIntroStartup>true</HasIntroStartup>

       <!-- 
       Base Themes are named: TerminalOnlyBlack, HacknetBlue, HacknetTeal,
       HacknetYellow, HackerGreen, HacknetWhite, HacknetPurple, HacknetMint
       -->
       <StartingTheme>Themes/ExampleTheme.xml</StartingTheme>

       <!-- You can reference songs from the original game here, or your
	    own .ogg files by path.
	    To reference original songs, use their name in the files! You
	    don't need the path, just the filename. This works for any songs in
	    these folders: Content/Music Content/DLC/Music

	    To play your own songs, use the path to that song in your
	    extension.  For example, try changing the song name below to
	    "Music/Chemical_Burns.ogg" - it'll start with that instead for
	    new saves! -->
       <IntroStartupSong>The_Quickening</IntroStartupSong>

       <!-- For use with the Sequencer. -->
       <SequencerTargetID>advExamplePC</SequencerTargetID>
       <SequencerSpinUpTime>10.5</SequencerSpinUpTime>
       <SequencerFlagRequiredForStart>testFlag</SequencerFlagRequiredForStart>
       <ActionsToRunOnSequencerStart>Actions/ThemeSwapActions.xml
         </ActionsToRunOnSequencerStart>


       <!-- Steam workshop fields -->

       <WorkshopDescription>This is the description of the extension that
     will appear in Steam Workshop and any other mod platforms this gets
     ported to. Max 8000 characters.
     You can use newlines in this as normal etc.</WorkshopDescription>

       <WorkshopLanguage>English</WorkshopLanguage>

       <!-- Sets the visibility of this item on the workshop.
       0 = public
       1 = friends only
       2 = private (self only)-->
       <WorkshopVisibility>2</WorkshopVisibility>

       <WorkshopTags>Extension</WorkshopTags>

       <WorkshopPreviewImagePath>WorkshopLogo.png</WorkshopPreviewImagePath>

       <!-- After first publish, this will be auto-filled.
	    Use that ID to update your extension. -->
       <WorkshopPublishID>NONE</WorkshopPublishID>

     </HacknetExtension>
   #+END_SRC
* DONE Computer
** Computer Tag Attributes
*** id
    The id of the computer. Used to reference it elsewhere.
*** name
    The name of the computer. Displayed to the player.
*** ip
    The ip address of the computer. Can be used to connect by the player. 
*** security
    Determines the default security on the computer. 
    Value Options: 0-5
    The value is the number of ports needed to open the computer for when <4.
    For 4 or 5, other security is added.
*** allowsDefaultBootModule
    Whether it launches the final daemon defined at startup/connect (rather than the filesystem). By default, this is true.
*** icon
    The icon displayed for the computer.
    Possible values for just the base game and for DLC-included are below.
    + Base Game
     - laptop
     - chip
     - kellis
     - tablet
     - ePhone
     - ePhone2
    + Labyrinths
     - Psylance
     - PacificAir
     - Alchemist
     - DLCLaptop
     - DLCPC1
     - DLCPC2
     - DLCServer
*** type
    The type of computer, numeric.
    + 1: corporate
    + 2: Home
    + 3: server
    + 4: empty
    + "empty" also works to generate no junk/IRC
*** Example
    #+BEGIN_SRC nxml
	  <Computer
	      id="advExamplePC" 
	      name="Extension Example PC" 
	      ip="167.194.132.7"
	      security="2"
	      allowsDefaultBootModule="false"
	      icon="chip" 
	      type="1" > 
    #+END_SRC
** Security Features
*** adminPass
    The password to the admin account.
**** Attributes
     + pass
**** Example
     #+BEGIN_SRC nxml
       <adminPass pass="password"/>
     #+END_SRC
*** account
    Create secondary accounts for the computer.
    Multiple account tags permitted.
**** Attributes
     + username
     + password
     + type
       - Name or number works
       - 0: ADMIN
       - 1: ALL (Delete priviliges)
       - 2: MAIL (For mail accounts)
       - 3: MISSIONLIST (For mission listing server accounts)
**** Example
     #+BEGIN_SRC nxml
       <account
	   username="Matt"
	   password="testpass"
	   type="ALL" />
       <account
	   username="mailGuy"
	   password="mailPass"
	   type="2" />
     #+END_SRC
*** TODO ports
    Comma-separated list of port numbers
    Valid options: 21, 22, 25, 80, 1433, 104, 6881, 443, 192
**** Example
     #+BEGIN_SRC nxml
       <ports>21, 22, 25, 80, 1433, 104, 6881, 443, 192, 554</ports>
     #+END_SRC
*** portsForCrack
    The number of ports needed to run PortHack.
    If >100, "INVIOLABILITY ERROR" message appears.
**** Attributes
     + val
**** Example
     #+BEGIN_SRC nxml
       <portsForCrack val="0" />
     #+END_SRC
*** proxy
    Creates (or negates) a proxy on the computer.
**** Attributes
     + time
       - Base time 30s, value is a multiplier (1 = normal, 2 = long). Experiment!
       - Set to -1 to remove.
**** Example
     #+BEGIN_SRC nxml
       <proxy time="2" />
     #+END_SRC
*** firewall
    Creates (or negates) a firewall on the computer
**** Attributes
     + level
       - Ideally same as solution length, must be at least as long. Number representing input length
     + solution
       - The string that solves the firewall
     + additionalTime
       - How much time is added at each analyze step
**** Example
     #+BEGIN_SRC nxml
       <firewall
	   level="6"
	   solution="Scypio"
	   additionalTime="1.0"/>
     #+END_SRC
*** trace
    Creates (or negates) a trace.
**** Attributes
     + time
       - The length of the trace in seconds, -1 to remove
**** Example
     #+BEGIN_SRC nxml
       <trace time="5678" />
     #+END_SRC
*** admin
    Creates an admin who monitors the computer.
**** Attributes
     + type
       - none: Remove auto-generated admin by security
       - basic: Resets everything after ~15 seconds
       - progress: Resets if the player is not admin
       - fast: Resets always? Unsure, unspecified
     + resetPassword
     + isSuper
       - Whether or not the player gets admin removed once achieving admin.
**** Example
     #+BEGIN_SRC nxml
       <admin
	   type="fast"
	   resetPassword="false"
	   isSuper="false"/>
       <admin
	   type="fast"
	   resetPassword="true"
	   isSuper="true" />
       <admin type="progress" />
       <admin type="none"/>
     #+END_SRC
*** portRemap
    Remaps default port values to custom values.
    Comma-separated list of remappings
    Left-hand side is default port value or name (ssh,ftp,web,torrent,medical,smtp,sql)
**** Example
     #+BEGIN_SRC nxml
       <portRemap>web=1234,22=2</portRemap>
     #+END_SRC
*** tracker
    Does the player get hacked if they leave logs downloading/deleting files?
    Empty tag, no attributes or elements (<tracker />)
    Attempts to reset player by default, or ETAS if "CSEC_Member" flag is attached.
**** Example
     #+BEGIN_SRC nxml
       <tracker />
     #+END_SRC
** Links and Positioning
*** dlink
    Represents a direct link towards another computer (for scanning)
    Multiple dlink tags supported
**** Attributes
     + target
       - The ID of the target computer
**** Example
     #+BEGIN_SRC nxml
       <dlink target="advExamplePC2" />
     #+END_SRC
*** eosDevice
    An EOS device can have internal note, mail, and file tags.
    Note filenames are generated automatically by taking the first line of the file and replacing spaces with underscores.
    Mail tags have no contents - just the user information.
    Files are meant for jailbroken phones, with notes for ordinary usage.
**** Attributes
     + name
       - The name of the EOS device. Displayed to the player.
     + id
       - The id of the EOS device. Used to reference it elsewhere.
     + icon
       - The icon displayed for the EOS device. Reasonable options are "tablet", "ePhone", and "ePhone2".
     + empty
       - Whether or not junk files are generated for the phone
     + passOverride
       - A custom password that isn't "alpine"
**** <mail> attributes
     + username
       - The username of the email account
     + pass
       - The password to the email account
**** Example
     #+BEGIN_SRC nxml
       <eosDevice
	   name="Deliliah's ePhone 4S"
	   id="eosIntroPhone"
	   icon="ePhone2"
	   empty="true"
	   passOverride="notAlpine">

	 <note>TestNote
       More text</note>

	 <note>Note filenames
       Note filenames are generated automatically by taking the first line of the file
       (in this case "Note Filenames") and replacing spaces with underscores.</note>

	 <mail
	     username="test@jmail.com"
	     pass="thisIstheaccountpass" />
	 <mail
	     username="test2@jmail.com"
	     pass="YouCanHaveLotsOfThese" />
  
	 <file
	     path="eos/test"
	     name="crackedFile.txt">This is mostly useful forjailbroken phones</file>
       </eosDevice>
#+END_SRC
*** positionNear
    Positions the computer near the target for cool networks.
**** Attributes
     + target
       - The ID of the target computer
     + position
       - Which position out of the total radially positioned options it fills
     + total
       - How many radially surrounding nodes are possible
     + extraDistance
       - Recommended between -0.6 and 0.3
     + force
       - Prevents stability check to ensure that it is placed close.
**** Example
     #+BEGIN_SRC nxml
       <positionNear
	   target="advExamplePC2"
	   position="1"
	   total="3"
	   extraDistance="0.1"
	   force="false"/>
     #+END_SRC
** Files
*** file
   Contents of the file are internal text.
**** Attributes
     + path
       - The path to the file
       - Can create subfolders like home/sub1/sub2
     + name
       - The name of the file
**** Example
     #+BEGIN_SRC nxml
       <file
	   path="home/NewDirectory"
	   name="Test_File">
       This is a longer file that also creates a new directory
       by adding something to path.

	   #BINARY#

	   test test
	 </file>
     #+END_SRC
*** customthemefile
    Link to a custom theme file found on the computer.
**** Attributes
     + path
       - The path to the file
     + name
       - The name of the file
       - Traditionally ends in .sys
     + themePath
       - A filepath to the custom theme xml file
**** Example
     #+BEGIN_SRC nxml
       <customthemefile
	   path="sys"
	   name="Custom_x-server.sys"
	   themePath="Themes/TestTheme2.xml"/>
     #+END_SRC
*** encryptedFile
    Encrypted files can be deciphered DECHead and Decypher
**** Attributes
     + path
       - The path to the file
       - Can create subfolders like home/sub1/sub2
     + name
       - The name of the file
       - End with .dec
     + extension
       - The extension the encrypted file will have once decrypted
     + ip
       - The ip address at which the file was created/encrypted
       - 192.168.1.1 or localhost are good defaults
     + header
       - The header of the file revealed by DECHead
     + pass
       - The password for the encrypted file.
       - If omitted, decryption requires no password.
**** Example
     #+BEGIN_SRC nxml
       <encryptedFile
	   path="home"
	   name="encrypted_File.dec"
	   extension=".txt"
	   ip="192.168.1.1"
	   header="This is the header"
	   pass="decryptionPassword"> This generates an encrypted file that can be
	   decrypted using the password above. It decrypts to have the extension .txt
       </encryptedFile>

       <encryptedFile
	   path="home"
	   name="easy_encrypted_File.dec"
	   ip="192.168.1.1"
	   header="This is the header"> By simply not providing a password like
       this one, it can be decrypted without a password
       </encryptedFile>

       <encryptedFile
	   path="home"
	   name="asdf2.dec"
	   ip="192.168.1.1"
	   header="This is the header"
	   pass="password"> This is an encrypted file referenced in ExampleMission.xml
       </encryptedFile>
     #+END_SRC
*** (Misc) Wildcard List
**** Main Game
     + General
       - #BINARY#
       - #BINARYSMALL#
       - #PLAYER_IP#
       - #PLAYERNAME#
       - #RANDOM_IP#
     + Port Programs
       - #SSH_CRACK#
       - #FTP_CRACK#
       - #WEB_CRACK#
       - #SMTP_CRACK#
       - #SQL_CRACK#
       - #MEDICAL_PROGRAM#
       - #RTSP_EXE#
     + Useful Programs
       - #DECYPHER_PROGRAM#
       - #DECHEAD_PROGRAM#
       - #EOS_SCANNER_EXE#
       - #SHELL_OPENER_EXE#
       - #TRACEKILL_EXE#
       - #EXT_SEQUENCER_EXE#
     + Miscellaneous Programs
       - #CLOCK_PROGRAM#
       - #HEXCLOCK_EXE#
       - #THEMECHANGER_EXE#
       - #SECURITYTRACER_PROGRAM#
     + Themes
       - #WHITE_THEME#
       - #GREEN_THEME#
       - #YELLOW_THEME#
       - #TEAL_THEME#
       - #BASE_THEME#
       - #PURPLE_THEME#
       - #MINT_THEME#
**** Labyrinths
     + General
       - #RANDOM_IP#
     + Port Programs
       - #TORRENT_EXE#
       - #SSL_EXE#
       - #FTP_FAST_EXE#
       - #PACIFIC_EXE#
     + Useful Programs
       - #MEM_DUMP_GENERATOR#
       - #MEM_FORENSICS_EXE#
       - #SIGNAL_SCRAMBLER_EXE#
       - #SHELL_CONTROLLER_EXE#
     + Miscellaneous Programs
       - #NETMAP_ORGANIZER_EXE#
       - #NOTES_DUMPER_EXE#
       - #DLC_MUSIC_EXE#
** [Labyrinths] Memory Dumps
*** memoryDumpFile
    The file that is turned into the memory dump.
    Internal contents are a "Memory" tag.
**** Attributes
     + name
       - The name of the memory dump file
       - Ends in ".md"
     + path
       - Where the memory dump occurs
       - Usually "home"
**** Memory Tag Structure
     + Commands
       - Command
	 * Content appears in the "commands" section
     + Data
       - Block
	 * Content apperas in the "files" section
	 * Supports multi-line notes
     + Images
       - Image
	 * Filepath to the image
**** Example
     #+BEGIN_SRC nxml
       <memoryDumpFile name="testDump.md" path="home">
	 <Memory>
	   <Data>
	     <Block>test string one</Block>
	     <Block>test string two</Block>
	   </Data>
	   <Commands>
	     <Command>connect 123.123.123.123</Command>
	   </Commands>
	   <Data>
	     <Block>1234432</Block>
	     <Block>gfdgfdgdf</Block>
	     <Block>asdf</Block>
	   </Data>
	 </Memory>
       </memoryDumpFile>
     #+END_SRC
** Base-Game Daemons
*** deathRowDatabase
    Loads a preset collection of death row records
**** Example
     #+BEGIN_SRC nxml
       <deathRowDatabase />
     #+END_SRC
*** academicDatabase
    Creates an academic database from the People.All list
**** Example
     #+BEGIN_SRC nxml
       <academicDatabase />
     #+END_SRC
*** ispSystem
    Creates an ISP system as used in ETAS
**** Example
     #+BEGIN_SRC nxml
       <ispSystem />
     #+END_SRC
*** MedicalDatabase
    Creates a medical database from the People.All list
**** Example
     #+BEGIN_SRC nxml
       <MedicalDatabase />
     #+END_SRC
*** uploadServerDaemon
    Allows files to be uploaded without admin permissions.
**** Attributes
     + name
       - The name the upload server shows to users
     + folder
       - The local folder uploaded contents are put into (e.g. "Drop")
     + needsAuth
       - Whether or not the user must have a login to upload? Unsure
     + color
       - An R,G,B string for the color
**** Example
     #+BEGIN_SRC nxml
       <uploadServerDaemon
	   name="Upload Dropbox"
	   folder="Drop" 
	   needsAuth="false"
	   color="204,116,212"/>
     #+END_SRC
*** addWebServer
    Adds a website front-end to the computer, with HTML support.
**** Attributes
     + name
       - The name of the website displayed to the user
     + url
       - Can be either a local path or even an actual URL to the website
       - Real URLs are jank and may not work for everyone, so beware.
**** Example
     #+BEGIN_SRC nxml
       <addWebServer
	   name="Website Server"
	   url="Web/ExampleWebsite/ExampleWebsite.html" />
     #+END_SRC
*** messageBoard
    Creates a \el-style message board hosted on the computer
**** Attributes
     + name
       - The name of the message board
**** thread
     + Contains the filepath of the thread
     + Multiple threads supported
     + Create threads from the template thread, it's quite finicky
     + Thread File Details
       - Threads start with the threadID on their own line
       - > can be used to make the line of text quoted
       - Certain images are supported at the start of posts
	 * #Academic
	 * #Sun
	 * #Snake
	 * #Circle
	 * #Duck
	 * #Page
	 * #Speech
	 * #Mod
	 * #Chip
       - Lines separated by 42 dashes, including at end of file
**** Example
     #+BEGIN_SRC nxml
       <messageBoard name="Custom Board Name!">
	 <thread>Docs/MessageBoardThreads/ExampleThread1.txt</thread>
	 <thread>Docs/MessageBoardThreads/ExampleThread2.txt</thread>
       </messageBoard>
     #+END_SRC
*** mailServer
    Hosts a mail server on the computer.
    Populate with <email> tags as explained below, with the body as the contents of the tag
**** Attributes
     + name
       - The name of the mail server
     + color
       - An R,G,B string for the color
     + generateJunk
       - A true/false flag determining whether junk emails are generated
**** <email> attributes
     + recipient
       - The account receiving the email
     + sender
       - The account sending the email
     + subject
       - The subject of the email
**** Example
     #+BEGIN_SRC nxml
       <mailServer
	   name="Example Mail Server"
	   color="50,237,212"
	   generateJunk="true">

	   <email
	       recipient="mailGuy"
	       sender="Sender Guy"
	       subject="Adding an email!">
       This is how you add emails to the mail server - logging in with someone's account
       will show these just like the way the player gets emails.
	   </email>
    
	   <email
	       recipient="mailGuy"
	       sender="Spam"
	       subject="amazing features">
       You can have as many of these as you want
	   </email>
    
	   <email
	       recipient="Matt"
	       sender="Spam"
	       subject="re: amazing features">
       Different users too
	   </email>

	   <email
	       recipient="Matt"
	       sender="Spam"
	       subject="re: re: amazing features">
       The generateJunk flag will specify if this server will generate junk emails
       for non-player accounts on it.
	   </email>
       </mailServer>
     #+END_SRC
*** HeartMonitor
    If killed, flag PatientID:DEAD is added. But don't kill anyone - that is a basegame thing.
**** Attributes
     + Patient
       - Patient ID: firstname initial underscore
**** Example
     #+BEGIN_SRC nxml
       <HeartMonitor patient="J_Stalvern"/>
     #+END_SRC
*** PointClicker
    Creates a PointClicker game from the People.All list
**** Example
     #+BEGIN_SRC nxml
       <PointClicker />
     #+END_SRC
*** SongChangerDaemon
    Allows the user to interactively change their current song
**** Example
     #+BEGIN_SRC nxml
       <SongChangerDaemon />
     #+END_SRC
*** variableMissionListingServer
    This can be used for mission listing (e.g. Entropy) or other news sites (e.g. SlashBot)
**** Attributes
     + name
       - The name of the server
     + iconPath
       - A filepath to the icon for the server
     + articleFolderPath
       - A path to the folder containing the articles for this server
     + color
       - An R,G,B string for the color
     + assigner
       - When true, missions can be accepted
       - When false, missions cannot be accepted (e.g. news articles)
     + public
       - Whether user permission is necessary to view
     + title
       - The rendered title of the server
**** Example
     #+BEGIN_SRC nxml
       <variableMissionListingServer
	   name="example listing server"
	   iconPath="Logo.png"
	   articleFolderPath="Docs/ListingServerArticles"
	   color="120,200,2"
	   assigner="false"
	   public="true"
	   title="This is the rendered title of the server" />
     #+END_SRC
*** missionHubServer
    Creates a CSEC-style mission board
**** Attributes
     + groupName
       - The name of the group associated with the mission hub
     + serviceName
       - The displayed name of the server
     + missionFolderPath
       - A filepath to the folder containing the missions for this hub
     + themeColor
       - An R,G,B string for the general color
     + lineColor
       - An R,G,B string for the color of the selected line
     + backgroundColor
       - An R,G,B string for the background color
     + allowAbandon
       - Whether the player can abandon taken missions
**** Example
     #+BEGIN_SRC nxml
       <missionHubServer
	   groupName="ExTech"
	   serviceName="Example Tech Contract Hub"
	   missionFolderPath="Missions/Misc"
	   themeColor="200,10,10"
	   lineColor="255,80,80"
	   backgroundColor="20,20,20"
	   allowAbandon="false"/>
     #+END_SRC
*** CreditsDaemon
    Loads the credits defined in home/CreditsData.txt
    %Super large text
    ^Kind of large text
**** Attributes
     + Title
       - The title of the credits daemon
     + ButtonText
       - The text on the button
     + ConditionalActionSetToRunOnButtonPressPath
       - A filepath to the action to perform on button press
**** Example
     #+BEGIN_SRC nxml
       <CreditsDaemon
	   Title="intro Extension Ending Credits"
	   ButtonText="Complete"
	   ConditionalActionSetToRunOnButtonPressPath="Actions/CreditsRunActions.xml"/>
     #+END_SRC
*** FastActionHost
    Optimized specifically for hosting delayable actions
    Use if performance issues arise, and *make sure this tag is first* under <Computer>!
**** Example
     #+BEGIN_SRC nxml
       <FastActionHost />
     #+END_SRC
** Labyrinths Daemons
*** DHSDaemon
    An IRC message board which can support missions and messages via factions.
    Has internal agent tags for other users
**** Attributes
     + groupName
       - The displayed name of the IRC server
     + addsFactionPointOnMissionComplete
       - Whether the player gains faction points on mission completion
     + autoClearMissionsOnPlayerComplete
       - Whether the missions get cleared after the player finishes theirs
     + themeColor
       - R,G,B string for the color of the selected line
     + allowContractAbbandon
       - Whether contracts can be abandoned
	 - Yes, it's misspelled.
**** <agent> attributes
     + name
       - The displayed name of the agent
     + pass
       - The password to sign in as the agent
     + color
       - R,G,B string for the username color
**** Example
     #+BEGIN_SRC nxml
       <DHSDaemon
	   groupName="NewFaction Hub"
	   addsFactionPointOnMissionComplete="true"
	   autoClearMissionsOanPlayerComplete="true"
	   themeColor="255, 255, 161"
	   allowContractAbbandon="false">

	 <agent
	     name="Tyson"
	     pass="rockemsockem"
	     color="209,74,48"/>

	 <agent
	     name="DependableSkeleton"
	     pass="d832n3msad"
	     color="112,198,255"/>

	 <agent
	     name="HA0"
	     pass="kolgateryu"
	     color="58,202,146"/>
       </DHSDaemon>
     #+END_SRC
*** CustomConnectDisplayDaemon
    Changes the default display to be similar to "ricer" in Labyrinths
**** Example
     #+BEGIN_SRC nxml
       <CustomConnectDisplayDaemon />
     #+END_SRC
*** LogoDaemon
    Displays a big, fancy logo with optional messages. Spinner as logo by default.
**** Attributes
     + Name
       - The name of the LogoDaemon
     + ShowsTitle
       - Whether the name of the LogoDaemon is displayed
     + TextColor
       - Transparency?,R,G,B string for the text color
     + LogoImagePath
       - A filepath to the image used for the logo
**** Example
     #+BEGIN_SRC nxml
       <LogoDaemon
	   Name="Logo Display Test"
	   ShowsTitle="true"
	   TextColor="0, 220, 220, 200"
	   LogoImagePath="Logo.png">
       Lines
       Here
       Appear under
       The Logo
       </LogoDaemon>
     #+END_SRC
*** LogoCustomConnectDisplayDaemon
    A custom connect display also with a nameplate logo and title image
**** Attributes
     + logo
       - A filepath to the logo image
     + title
       - A filepath to a title image?
     + overdrawLogo
       - No idea, test it out and update this
     + buttonAlignment
       - Where the button is aligned; options of "left", "middle", and "right"
**** Example
     #+BEGIN_SRC nxml
       <LogoCustomConnectDisplayDaemon
	   logo="Logo.png"
	   title="Logo.png"
	   overdrawLogo="true"
	   buttonAlignment="left" />
     #+END_SRC
*** IRCDaemon
    Used for an IRC daemon without associated missions.
**** Attributes
     + themeColor
       - R,G,B string for the color of the selected line
     + name
       - The displayed name of the IRC channel
     + needsLogin
       - Whether the player must login to use the IRC
**** <user> attributes
     + name
       - The displayed name of the user
     + color
       - R,G,B string for the color of the user's displayed name
**** <post> attributes
     + user
       - Which user made the IRC post
**** Example
     #+BEGIN_SRC nxml
       <IRCDaemon themeColor="67,204,148" name="Misc IRC Channel" needsLogin="false">
	 <user name="Vegas" color="0,209,232"/>
	 <user name="bprm" color="202,98,0"/>
	 <user name="Care_ey" color="0,196,82"/>

	 <post user="Vegas">Post IRC Messages here!</post>
	 <post user="bprm">dont forget to set the users</post>
	 <post user="Care_ey">Yep, this can also be used in the faction scripts to
	 add messages etc to.</post>
	 <post user="Vegas">That's so cool!</post>
       </IRCDaemon>
     #+END_SRC
*** WhitelistAuthenticatorDaemon
    A server that protects either itself or other servers.
**** Attributes
     + SelfAuthenticating
       - Whether or not it protects itself with its own whitelist
       - If set to true, then it's pretty much unbreakable w/o scripts
     + Remote
       - The ID of the computer whose whitelist you check against
**** Example
     #+BEGIN_SRC nxml
       <WhitelistAuthenticatorDaemon SelfAuthenticating="false" />
       <WhitelistAuthenticatorDaemon Remote="RemoteServerID"/>
       <WhitelistAuthenticatorDaemon SelfAuthenticating="true"/>
     #+END_SRC
*** DatabaseDaemon
   Represents a database able to be read through by the player.
   No quotes are necessary for values of any element.
**** Attributes
     + Permissions
       - The permission access of the database
       - "private" is allowed, presumably "public" as well
     + DataType
       - The type of record that the database holds.
       - Supported types
	 * GitCommitEntry
	 * TextRecord
	 * OnlineAccount
	 * CAROData
	 * Account
	 * SurveillanceProfile
     + Foldername
       - The folder under which data entries are stored
     + Color
       - R,G,B string for the color of the database
     + AdminEmailAccount
       - The email address of the database admin
     + AdminEmailHostID
       - The email computer that hosts the admin's email account
     + Name
       - The name of the database
**** Supported Type Formats
     + GitCommitEntry
       - EntryNumber
	 * Integral value representing the commit number
       - ChangedFiles
	 * Format as <String>Filename.ext</String> representing the names of changed files
       - Message
	 * Commit message explaining what was changed
	 * Can start with REMOTE COMMIT: to represent from other IP (Not necessary but done in example
       - Username
	 * Who made the change
       - SourceIP
	 * IP of the computer committing the change
	 * 192.168.1.1 (Localhost) or something similar for local computer having made the change
     + TextRecord
       - Title
	 * The title of the record
       - Data
	 * The data associated with the record
     + OnlineAccount
       - ID
	 * The ID of the associated account
       - Username
	 * The username of the associated account
       - BanStatus
	 * A string representing whether the user is banned (e.g. "very yes")
       - Notes
	 * A string representing other notes about the account
     + CAROData
       - UserID
       - Headshots
       - Rank
       - Crowbars
       - InventoryID
       - BanStatus
     + Account
       - ID
       - Cash
       - Bank
       - Apartments
       - Vehicles
       - PegasusVehicles
       - Rank
       - RP
       - Kills
     + SurveillanceProfile
       - Name
       - Age
       - HomeCity
       - Notes
       - CriminalRecord
**** Example
     #+BEGIN_SRC nxml
       <DatabaseDaemon
	   Permissions="private"
	   DataType="GitCommitEntry"
	   Foldername="database"
	   Color="85,0,150"
	   AdminEmailAccount="Matt@TestExtensionMail.com"
	   AdminEmailHostID="advExamplePC"
	   Name="Test database">

	 <GitCommitEntry>
	   <EntryNumber>8613</EntryNumber>
	   <ChangedFiles>
	     <String>Neopals.php</String>
	   </ChangedFiles>
	   <Message>Reverted Minor updates because it broke everything</Message>
	   <UserName>T.Champer</UserName>
	   <SourceIP>192.168.1.1 (Localhost)</SourceIP>
	 </GitCommitEntry>

	 <GitCommitEntry>
	   <EntryNumber>8611</EntryNumber>
	   <ChangedFiles>
	     <String>Content.pak</String>
	   </ChangedFiles>
	   <Message>REMOTE COMMIT: Decreased pelvis bulge on Sparkle costume set :(</Message>
	   <UserName>A.Wallin</UserName>
	   <SourceIP>54.192.234.65</SourceIP>
	 </GitCommitEntry>

       </DatabaseDaemon>
     #+END_SRC
** Example
Pastebin Link:  https://pastebin.com/NwtgTdPW
Simplified Contents:
  #+BEGIN_SRC nxml
    <?xml version = "1.0" encoding = "UTF-8" ?>
    <Computer id="advExamplePC" 
	      name="Extension Example PC" 
	      ip="167.194.132.7"
	      security="2"
	      allowsDefaultBootModule="false"
	      icon="chip" 
	      type="1" > 

      <adminPass pass="password" />

      <account username="Matt" password="testpass" type="ALL" />
      <account username="mailGuy" password="mailPass" type="MAIL" />
      <ports>21, 22, 25, 80, 1433, 104, 6881, 443, 192, 554</ports>

      <!-- <proxy time="2" /> -->

      <portsForCrack val="0" />
      <!-- Number of ports to be open to allow porthack to run -->


      <!--<firewall level="6" solution="Scypio" additionalTime="1.0"/>-->

      <trace time="5678" />

      <admin type="fast" resetPassword="false" isSuper="false"/> 

      <portRemap>web=1234,22=2</portRemap>

      <!-- Whether leaving file-modification logs will lead to counterhacking. -->
      <tracker />

      <!-- Network Stuff -->
      <dlink target="advExamplePC2" />

      <positionNear target="advExamplePC2" position="1" total="3"
		    extraDistance="0.1" force="false"/>

      <file path="home" name="Test_File.txt">This is a test file in home</file>
      <file path="home" name="asdf.txt">This is
    A Multiline
    File.

    Note that it doesn't have whitespace on the left side.
    That causes formatting issues!</file>
      <file path="home" name="downloadFile.txt">This is a file for some of the goals
      in ExampleMission.xml</file>
      <file path="home" name="changeFile.txt">This is too! A
      other a! B</file>
      <file path="bin" name="Binary_File">#BINARY#</file>
      <file path="home/NewDirectory" name="Test_File">
    This is a longer file that also creates a new directory with its path.

	#BINARY#
	This generates some binary (2000 chars of it)

	#BINARYSMALL#
	This generates some binary (1000 chars of it)

	#PLAYER_IP#
	Becomes the IP of the player's computer

	#PLAYERNAME#
	the above string converts itself into the player's name

	#RANDOM_IP#
	A fresh, randomly generated IP Address

	test test
      </file>
      <file path="bin" name="SSHCrack.exe">#SSH_CRACK#</file>
      <file path="bin" name="FTPBounce.exe">#FTP_CRACK#</file>
      <file path="bin" name="WebServerWorm.exe">#WEB_CRACK#</file>
      <file path="bin" name="SMTPOverflow.exe">#SMTP_CRACK#</file>
      <file path="bin" name="SQLBufferOverflow.exe">#SQL_CRACK#</file>
      <file path="bin" name="HexClock.exe">#HEXCLOCK_EXE#</file>
      <file path="bin" name="Clock.exe">#CLOCK_PROGRAM#</file>
      <file path="bin" name="Decypher.exe">#DECYPHER_PROGRAM#</file>
      <file path="bin" name="DECHead.exe">#DECHEAD_PROGRAM#</file>
      <file path="bin" name="KBTPortTest.exe">#MEDICAL_PROGRAM#</file>
      <file path="bin" name="ThemeChanger.exe">#THEMECHANGER_EXE#</file>
      <file path="bin" name="eosDeviceScan.exe">#EOS_SCANNER_EXE#</file>
      <file path="bin" name="SecurityTracer.exe">#SECURITYTRACER_PROGRAM#</file>
      <file path="bin" name="Tracekill.exe">#TRACEKILL_EXE#</file>
      <file path="bin" name="RTSPCrack.exe">#RTSP_EXE#</file>
      <file path="bin" name="ESequencer.exe">#EXT_SEQUENCER_EXE#</file>
      <file path="bin" name="OpShell.exe">#SHELL_OPENER_EXE#</file>

      <!-- Themes -->
      <file path="sys" name="White-Theme.sys">#WHITE_THEME#</file>
      <file path="sys" name="Green-Theme.sys">#GREEN_THEME#</file>
      <file path="sys" name="Yellow-Theme.sys">#YELLOW_THEME#</file>
      <file path="sys" name="Teal-Theme.sys">#TEAL_THEME#</file>
      <file path="sys" name="Base-Theme.sys">#BASE_THEME#</file>
      <file path="sys" name="LE-Theme.sys">#PURPLE_THEME#</file>
      <file path="sys" name="Mint-Theme.sys">#MINT_THEME#</file>

      <file path="home" name="CreditsData.txt">
    %---  Credits File  ---

    ^Why this exists
    This file contains the credits for the credits daemon below!

    %Starting a line with % makes the text super big
    ^And starting it with ^ makes is kind of big.
    Lines starting with anything else are normal

    ^Location
    This file must be in home/CreditsData.txt
    for the credits daemon to find and use it.

    </file>

      <customthemefile path="sys" name="Custom_x-server.sys"
		       themePath="Themes/SecondaryTheme.xml"/>
      <customthemefile path="sys" name="Yuri_x-server.sys"
		       themePath="Themes/YuriTheme.xml"/>

      <encryptedFile path="home" name="encrypted_File.dec"
		     extension=".txt" ip="192.168.1.1"
		     header="This is the header" pass="decryptionPassword">
	This generates an encrypted file that can be decrypted using the password
	above. It decrypts to have the extension .txt
      </encryptedFile>
      <encryptedFile path="home" name="easy_encrypted_File.dec" ip="192.168.1.1"
		     header="This is the header">
	By simply not providing a password like this one, it can be decrypted
	without a password
      </encryptedFile>
      <encryptedFile path="home" name="asdf2.dec" ip="192.168.1.1"
		     header="This is the header" pass="password">
	This is an encrypted file referenced in ExampleMission.xml
      </encryptedFile>

      <eosDevice name="Deliliah's ePhone 4S" id="eosIntroPhone" icon="ePhone2"
		 empty="true" passOverride="notAlpine">
	<note>TestNote
    More text</note>
    <note>Note filenames
    Note filenames are generated automatically by taking
	the first line of the file (in this case "Note Filenames") and replacing
	spaces with underscores.</note>
	<mail username="test@jmail.com" pass="thisIstheaccountpass" />
	<mail username="test2@jmail.com" pass="YouCanHaveLotsOfThese" />
	<file path="eos/test" name="crackedFile.txt"
	      >This is mostly useful for jailbroken phones</file>
      </eosDevice>

      <!-- 
      ####################
	 -  Daemons  -
      ####################

      These are the "programs" running on nodes that do things.
      -->

      <mailServer name="Example Mail Server" color="50,237,212" generateJunk="true">
	<email recipient="mailGuy" sender="Sender Guy" subject="Adding an email!">
    This is how you add emails to the mail server - logging in with someone's
    account will show these just like the way the player gets emails.
	</email>
	<email recipient="mailGuy" sender="Spam" subject="amazing features">
    You can have as many of these as you want
	</email>
	<email recipient="Matt" sender="Spam" subject="amazing features">
    Different users too
	</email>
      </mailServer>

      <uploadServerDaemon name="Upload Dropbox" folder="Drop" 
			  needsAuth="false" color="204,116,212"/>


      <addWebServer name="Website Server"
		    url="Web/ExampleWebsite/ExampleWebsite.html" />

      <!-- Can be really janky, may not work for everyone or every site -->
      <!--
      <addOnlineWebServer name="Online Server" url="http://www.test.com" />
      -->

      <deathRowDatabase />
      <academicDatabase />
      <ispSystem />

      <messageBoard name="Custom Board Name!">
	<thread>Docs/MessageBoardThreads/ExampleThread1.txt</thread>
	<thread>Docs/MessageBoardThreads/ExampleThread2.txt</thread>
      </messageBoard>

      <MedicalDatabase />
      <HeartMonitor patient="J_Stalvern"/>
      <PointClicker />
      <SongChangerDaemon /> 

      <variableMissionListingServer name="example listing server"
       iconPath="Logo.png" articleFolderPath="Docs/ListingServerArticles"
       color="120,200,2" assigner="false" public="false"
       title="This is the rendered title of the server"/>

      <missionHubServer groupName="ExTech" serviceName="Example Tech Contract Hub"
       missionFolderPath="Missions/Misc" themeColor="200,10,10"
       lineColor="255,80,80" backgroundColor="20,20,20" allowAbandon="false"/>

      <CreditsDaemon Title="intro Extension Ending Credits" ButtonText="Complete"
       ConditionalActionSetToRunOnButtonPressPath="Actions/CreditsRunActions.xml"/>

      <!-- 
      #########################

	 - Labyrinths Content -

      #########################
      -->

    <!-- Memory dump file - this can be downloaded and analyzed with
	 MemForensics.exe -->
      <memoryDumpFile name="testDump.md" path="home">
	<Memory>
	  <Data>
	    <Block>test string one</Block>
	    <Block>test string two</Block>
	  </Data>
	  <Commands>
	    <Command>connect 123.123.123.123</Command>
	  </Commands>
	  <Data>
	    <Block>1234432</Block>
	    <Block>gfdgfdgdf</Block>
	    <Block>asdf</Block>
	  </Data>
	</Memory>
      </memoryDumpFile>

      <Memory>
	<Commands>
	  <Command>cd /log</Command>
	  <Command>rm *.log</Command>
	  <Command>cd /log</Command>
	  <Command>rm *.log</Command>
	  <Command>cd /log</Command>
	  <Command>rm *.log</Command>
	  <Command>cd /log</Command>
	  <Command>rm *.log</Command>
	</Commands>
	<Data>
	  <Block>This appears in the "files" section</Block>
	  <Block>
	    more
	    and longer, multi line notes!
	    !
	    asdf
	  </Block>
	</Data>
	<Images>
	  <Image>DLC/Sprites/Misc/DraculaTank</Image>
	</Images>
      </Memory>

      <!-- Labyrinths Daemons -->
      <CustomConnectDisplayDaemon />

      <LogoDaemon Name="Logo Display Test" ShowsTitle="true"
		  TextColor="47, 212, 163, 200" LogoImagePath="Logo1.png">
	Lines
	Here
	Appear under
	The Logo
      </LogoDaemon>

      <LogoCustomConnectDisplayDaemon logo="Logo.png" title="Logo.png"
				      overdrawLogo="true" buttonAlignment="left" />

      <!-- This is your basic whitelist server "host" type - it wont check incoming
	   connection to itself against it's list.  It only serves a protective
	   function against *other* servers.-->
      <WhitelistAuthenticatorDaemon SelfAuthenticating="false" />

      <!-- This one connects to a remote host and checks against that host's
	   whitelist 
      <WhitelistAuthenticatorDaemon Remote="RemoteServerID"/>

      This one protects itself against all connections not on the list. Generally
      "unbreakable" without scripts.
      <WhitelistAuthenticatorDaemon SelfAuthenticating="true"/>
      -->

      <!-- Experiment with this one yourself! -->
      <MarkovTextDaemon Name="Test this one yourself"
			SourceFilesContentFolder="Notes/ListingServerArticles" />

      <IRCDaemon themeColor="67,204,148" name="Misc IRC Channel" needsLogin="false">
	<user name="Vegas" color="0,209,232"/>
	<user name="bprm" color="202,98,0"/>
	<user name="Care_ey" color="0,196,82"/>

	<post user="Vegas">Post IRC Messages here!</post>
	<post user="bprm">don't forget to set the users</post>
	<post user="Care_ey">Yep, this can also be used in the faction scripts to
	add messages etc to.</post>
	<post user="Vegas">That's so cool!</post>
      </IRCDaemon>

      <!--START_LABYRINTHS_ONLY_CONTENT-->
      <!-- Everything under this line will only work for player that have the
	   Hacknet Labyrinths DLC pack installed! -->

      <DHSDaemon groupName="NewFaction Hub" addsFactionPointOnMissionComplete="true"
		 autoClearMissionsOnPlayerComplete="true" themeColor="255, 255, 161"
		 allowContractAbbandon="false">
	<agent name="Tyson" pass="rockemsockem" color="209,74,48"/>
	<agent name="DependableSkeleton" pass="d832n3msad" color="112,198,255"/>
	<agent name="HA0" pass="kolgateryu" color="58,202,146"/>
      </DHSDaemon>

      <!-- Database daemons display a list of records of any datatype in Hacknet. No
	   datatype will give the "API Access" screen like Pacific air had.
	   Testers: let me know if you want a special datatype compiled up for you
	   specifically. It's very quick.

	Current Datatypes:
	,*all basic C# datatypes from .NET*
	Everything in the Hacknet codebase

	Easy templated ones below:

	Git Commit entry, as seen below

	"TextRecord"
	<TextRecord>
	  <Title>Record Title</Title>
	  <Data>Body Data</Data>
	</TextRecord>

	"OnlineAccount"
	<OnlineAccount>
	  <ID>1234</ID>
	  <Username>asdf</Username>
	  <BanStatus>very yes</BanStatus>
	  <Notes>notes here</Notes>
	</OnlineAccount>


	"CAROData"
	UserID
	Headshots
	Kills
	Rank
	Crowbars
	InventoryID
	BanStatus

	"Account"
	string ID;
	string Cash;
	string Bank;
	string Apartments;
	string Vehicles;
	string PegasusVehicles;
	string Rank;
	string RP;
	string Kills;

	"SurveillanceProfile"
	string Name;
	string Age;
	string HomeCity;
	string Notes;
	string CriminalRecord;

	Happy to add more on request.

	-->
      <DatabaseDaemon Permissions="private" DataType="GitCommitEntry"
		      Foldername="database" Color="85,0,150"
		      AdminEmailAccount="Matt@TestExtensionMail.com"
		      AdminEmailHostID="advExamplePC" Name="Test database">

	<GitCommitEntry>
	  <EntryNumber>8613</EntryNumber>
	  <ChangedFiles>
	    <String>Neopals.php</String>
	  </ChangedFiles>
	  <Message>Reverted Minor updates because it broke everything</Message>
	  <UserName>T.Champer</UserName>
	  <SourceIP>192.168.1.1 (Localhost)</SourceIP>
	</GitCommitEntry>

	<GitCommitEntry>
	  <EntryNumber>8611</EntryNumber>
	  <ChangedFiles>
	    <String>Content.pak</String>
	  </ChangedFiles>
	  <Message>REMOTE COMMIT: Decreased pelvis bulge on Sparkle costume set
	  :(</Message>
	  <UserName>A.Wallin</UserName>
	  <SourceIP>54.192.234.65</SourceIP>
	</GitCommitEntry>

      </DatabaseDaemon>

      <!-- Labyrinths Programs -->
      <file path="bin" name="TorrentStreamInjector.exe">#TORRENT_EXE#</file>
      <file path="bin" name="SSLTrojan.exe">#SSL_EXE#</file>
      <file path="bin" name="FTPSprint.exe">#FTP_FAST_EXE#</file>
      <file path="bin" name="SignalScramble.exe">#SIGNAL_SCRAMBLER_EXE#</file>
      <file path="bin" name="MemForensics.exe">#MEM_FORENSICS_EXE#</file>
      <file path="bin" name="MemDumpGenerator.exe">#MEM_DUMP_GENERATOR#</file>
      <file path="bin" name="PacificPortcrusher.exe">#PACIFIC_EXE#</file>
      <file path="bin" name="NetmapOrganizer.exe">#NETMAP_ORGANIZER_EXE#</file>
      <file path="bin" name="ComShell.exe">#SHELL_CONTROLLER_EXE#</file>
      <file path="bin" name="DNotes.exe">#NOTES_DUMPER_EXE#</file>
      <file path="bin" name="Tuneswap.exe">#DLC_MUSIC_EXE#</file>
      <file path="bin" name="Clockv2.exe">#CLOCK_V2_EXE#</file>

      <!--END_LABYRINTHS_ONLY_CONTENT-->

    </Computer>
  #+END_SRC
* DONE Mission
  With the exception of the attributes and the example, every section here represents a tag in the mission XML file.
** Mission Tag Attributes
*** id
    A unique mission identifier. Not used anywhere in the code - for debugging/testing purposes.
*** activeCheck
    Whether the mission is constantly checking for mission completion.
    If true, mission completion checks every frame.
    If false, mission completion checks on email response.
*** shouldIgnoreSenderVerification
    Prevents check ensuring that the player responded to the right email during mission completion.
*** Example
    #+BEGIN_SRC nxml
      <mission
	  id="testMission0"
	  activeCheck="true"
	  shouldIgnoreSenderVerification="false">
    #+END_SRC
** goals
   The <goals> tag can have any number of <goal> tags, all of which must be completed for the mission to complete.
   The following section denote how to define "goal" tags based on their "type" attribute.
*** filedeletion
    Delete the file at the target node, found at path/file.
**** Additional Attributes
     + target
       - The ID of the target computer
     + file
       - The file to be deleted
     + path
       - The folder containing the target file
**** Example
     #+BEGIN_SRC nxml
       <goal
	   type="filedeletion"
	   target="advExamplePC"
	   file="asdf.txt"
	   path="home"/>
     #+END_SRC
*** clearfolder
    Delete all files at the target node in path/
**** Additional Attributes
     + target
       - The ID of the target computer
     + path
       - The folder to be cleared
**** Example
     #+BEGIN_SRC nxml
       <goal
	   type="clearfolder"
	   target="advExamplePC"
	   path="home"/>
     #+END_SRC
*** filedownload
    Download the file at the target node, found at path/file
**** Additional Attributes
     + target
       - The ID of the target computer
     + file
       - The file to be downloaded
     + path
       - The folder containing the target file
**** Example
     #+BEGIN_SRC nxml
       <goal
	   type="filedownload"
	   target="advExamplePC"
	   file="downloadFile.txt"
	   path="home"/>
     #+END_SRC
*** filechange
    Add or remove text specified by the keyword from the file at the target node, found at path/file.
**** Additional Attributes
     + target
       - The ID of the target computer
     + file
       - The file to be changed
     + path
       - The folder containing the target file
     + keyword
       - The text to be modified (removed or added)
     + removal
       - If true, the keyword is meant to be removed.
       - If false or unspecified, the keyword is meant to be added to the file.
     + caseSensitive
       - Whether the replacement is meant to be case-sensitive
       - False by default, optional to specify.
**** Example
     #+BEGIN_SRC nxml
       <goal
	   type="filechange"
	   target="advExamplePC"
	   file="changeFile.txt"
	   path="home"
	   keyword="extension"/>
       <goal
	   type="filechange"
	   target="advExamplePC"
	   file="changeFile.txt"
	   path="home"
	   keyword="data"
	   removal="true"
	   caseSensitive="true"/>
     #+END_SRC
*** getadmin
    Get admin access on the target system.
    Note that for email-driven mission checking, the player must *still be admin* when they respond for the mission to complete properly. If an admin resets the password or ports between the time that the player disconnects and the time that the player responds to the email, this check will fail.
**** Additional Attributes
     + target
       - The ID of the target computer
**** Example
     #+BEGIN_SRC nxml
       <goal type="getadmin" target="advExamplePC"/>
     #+END_SRC
*** getstring
    Respond to the email with the string in the "Additional Info" field.
**** Additional Attributes
     + target
       - The string that the player must respond with to complete the goal
**** Example
     #+BEGIN_SRC nxml
       <goal type="getstring" target="password" />
     #+END_SRC
*** delay
    A task that completes [time] seconds after the first attempt to complete it.
    Useful with activeCheck set to true, allowing for a human-feeling buffer between mission response times.
**** Additional Attributes
     + time
       - A decimal number representing how many seconds the delay is.
**** Example
     #+BEGIN_SRC nxml
       <goal type="delay" time="10.0"/>
     #+END_SRC
*** hasflag
     Perform the necessary actions to have the target flag set.
     Flags can be set by mission end functions, daemons on events, or dynamic actions.
**** Additional Attributes
     + target
       - The name of the flag needed to be added
**** Example
     #+BEGIN_SRC nxml
       <goal type="hasflag" target="flagName"/>
     #+END_SRC
*** fileupload
    Upload the file found at the target node at path/file to the destination computer at destPath, decrypting the file if necessary.
**** Additional Attributes
     + target
       - The ID of the target computer
     + file
       - The file to be uploaded
     + path
       - The folder containing the target file
     + destTarget
       - The ID of the computer to which the file should be uploaded
     + destPath
       - The folder to which the file should be uploaded
       - Should be Drop/Uploads for upload daemon
     + decrypt
       - Whether the file is encrypted and needs to be decrypted for mission success
       - Default value is "false" if omitted
     + decryptPass
       - The password to decrypt the file, if necessary
       - Must be included if decrypt="true"
**** Example
     #+BEGIN_SRC nxml
       <goal
	   type="fileupload"
	   target="advExamplePC"
	   file="asdf.txt"
	   path="home"
	   destTarget="introFactionHomeNode"
	   destPath="Drop/Uploads"/>

       <goal
	   type="fileupload"
	   target="advExamplePC"
	   file="asdf2.dec"
	   path="home"
	   destTarget="introFactionHomeNode"
	   destPath="home"
	   decrypt="true"
	   decryptPass="password"/>
     #+END_SRC
*** AddDegree
    Add the degree matching the degree name, uni, and GPA for the provided owner.
    An academic computer must exist with the following properties:
    1) ID must be "academic"
    2) It must contain an Academic Database Daemon
**** Additional Attributes
     + owner
       - The owner of the degree
     + degree
       - The name of the degree needed
     + uni
       - The university associated with the degree
     + gpa
       - The gpa associated with the degree
**** Example
     #+BEGIN_SRC nxml
       <goal
	   type="AddDegree"
	   owner="John Stalvern"
	   degree="Masters in Digital Security"
	   uni="Manchester University"
	   gpa="3.0"/>
     #+END_SRC
*** wipedegrees
    Remove all degrees for the provided owner.
    An academic computer must exist with the following properties:
    1) ID must be "academic"
    2) It must contain an Academic Database Daemon   
**** Additional Attributes
     + owner
       - The owner of the degree
**** Example
     #+BEGIN_SRC nxml
       <goal type="wipedegrees" owner="John Stalvern"/>
     #+END_SRC
*** sendemail
    Have an email sent to a specified address with a defined subject.
    Mostly useful for detecting medical records of the form "MedicalRecord - Lastname_Firstname".
**** Additional Attributes
     + mailServer
       - The mail server to which the email will be sent
     + recipient
       - The username of the mail recipient
     + subject
       - The subject of the email that must be sent.
       - Medical records are of the form "MedicalRecord - Lastname_Firstname".
**** Example
     #+BEGIN_SRC nxml
       <goal
	   type="sendemail"
	   mailServer="jmail"
	   recipient="mailuser123"
	   subject="Email Subject!"/>
     #+END_SRC
*** getadminpasswordstring [Labyrinths]
    Must get the admin password string of the target computer.
    Presumably into autocomplete capabilities?
**** Additional Attributes
     + target
       - The ID of the target computer
**** Example
     #+BEGIN_SRC nxml
       <goal type="getadminpasswordstring" target="advExamplePC"/>
     #+END_SRC
** missionStart/missionEnd
   These tags define a function to run at the start or end of the mission.
   The sections (after Attributes) denote different function contents for this tag.
   Note that missionEnd will never run if the mission is abandoned or otherwise lost.
*** Attributes
    + val
      - An attribute that changes in meaning depending on the function
      - Holds an integer value to be passed to the specified function
    + suppress
      - If true, the missionStart will activate on mission send.
      - If false, it will activate on mission load.
	* Hub missions are loaded when the save game is loaded or a new game is started.
*** setFaction:FACTION_ID
    Sets the player's faction to FACTION_ID
*** addRank
    Adds "val" in rank to the current active faction.
*** addRankFaction:FACTION_ID
    Adds "val" in rank to the specified faction.
*** addFlags:flag1,flag2,...
    Adds the defined flag(s) to the current session.
*** removeFlags:flag1,flag2,...
    Removes the listed flags if they exist.
*** changeSong
    Changes the song to the song specified by val.
**** Song Options
    1) Revolve
    2) The_Quickening
    3) TheAlgorithm
    4) Ryan3
    5) Bit(Ending)
    6) Rico_Puestel-Roja_Drifts_By
    7) out_run_the_wolves
    8) Irritations
    9) Broken_Boy
    10) Ryan10
    11) tetrameth

*** loadConditionalActions:Path/To/Actions.xml
    Loads the conditional action set at the provided path.
*** setHubServer:SERVER_ID
    Sets the given server to be the hub server on the map.
    Visually, this adds the little spinny thing.
*** setAssetServer:SERVER_ID
    Sets the given server to be the asset server on the map.
    Visually, this adds the little star inside it.
*** playCustomSong:Path/To/Song.ogg
    Fades the music into the custom song specified. Does not play on XNA branch.
*** playCustomSongImmediatley:Path/To/Song.ogg
    Unknown if the typo is needed.
    Snaps the music to the custom song specified.
*** changeSongDLC [Labyrinths]
     Changes the song to the DLC song specified by val.
**** Song Options
     1) Remi2
     2) snidelyWhiplash
     3) Slow_Motion
     4) World_Chase
     5) HOME_Resonance
     6) Remi_Finale
     7) RemiDrone
     8) DreamHead
     9) Userspace
     10) CrashTrack
*** Example
    #+BEGIN_SRC nxml
      <missionStart val="7">changeSong</missionStart>
      <missionEnd val="1">addRank</missionEnd>
    #+END_SRC
** nextMission
   A filepath to the mission that is loaded upon completion of this mission.
   If no mission should follow this one (e.g. hub server), use "NONE" as the filepath.
   
   *The IsSilent attribute silences THIS mission, not the next mission!*
   IsSilent prevents an email from being sent on load.
*** Example
    #+BEGIN_SRC nxml
      <nextMission IsSilent="false">NONE</nextMission>
    #+END_SRC
** branchMissions
   Branch missions are all checked when the current mission goals are checked.
   They are checked in order to see if all goals are completed of any branch.
   If a branch succeeds, its nextMission will be loaded.
   Additionally, branch missions are always silent and thus don't send an email.
   
   Inside of this tag, multiple <branch> tags should exist containing a filepath to the branching mission files.
*** Example
    #+BEGIN_SRC nxml
      <branchMissions>
	<branch>Missions/BranchExample/TestBranchMission.xml</branch>
	<!-- You can have more than one branch mission here -->
      </branchMissions>
    #+END_SRC
** posting
   This represents what gets posted to a mission listing board.
*** Attributes
    + title
      - The displayed title of the posting
    + reqs
      - Comma separated list of required flags before mission can be accepted
      - Optional, I assume
    + requiredRank
      - The required faction rank of the player to unlock this mission
      - Must be at least this value
*** Example
    #+BEGIN_SRC nxml
      <posting
	  title="Do the Extension Test Mission"
	  reqs="someCustomFlag"
	  requiredRank="3">
      This is the body text of the posting that will appear
      when the mission is clicked on.
      It should contain a basic outline,
      with any warnings the player needs.

      Once accepted, the email should contain full details.
      </posting>
    #+END_SRC
** email
   Emails are structured as a nested set of tags.
*** sender
    The contents of this tag denote who sent the email, as a name which acts like an ID.

    The sender field is *very important* for branching or silent mission chains.
    Even if this file you're editing isn't the email on the server the player will be responding to, it will still run it's completion checks as long as the player is responding to any email from the same sender.
    This doesn't affect basic and normal missions, so if you're not doing anything too fancy, don't worry about it.
*** subject
    The subject of the email.
*** body
    The body of the email. Leave off auto-whitespace, be careful with formatting, and email contents are important.
*** attachments
    Clickable items at the bottom of an email with a "+".
    Keep the number of attachments small to keep the player focused.
    Multiple types of any attachment are supported.
    An attachments tag is always needed, even if empty!
**** note
     Add a note attachment to your email.
     + Attribute
       - title
	 * The title of the note
     + Contents
       - The body of the note
       - Supports multiple lines, don't have auto-whitespace!
**** link
     Add a link to a computer in your email.
     + Attribute
       - comp
	 * The ID of the computer to which you are linking
**** account
     Add an account autologin to your email.
     + Attributes
       - comp
	 * The ID of the computer the account information is used on
       - user
	 * The username of the account on the computer
       - pass
	 * The password of the account on the computer
*** Example
    #+BEGIN_SRC nxml
      <email>
	<sender>Matt</sender>
	<subject>Test Mission Email</subject>
	<body>This is the body of the email.
      Don't forget to not auto-align your text!
      Good luck,
      -Matt
	</body>
  
	<attachments>
	  <note title="An example note">Note contents</note>
	  <link comp="missionTestNode" />
	  <account comp="missionTestNode" user="TestUser" pass="testpass" />      
	</attachments>
      </email>
    #+END_SRC
** Example
Pastebin Link: https://pastebin.com/WtFLbQvH
Simplified Contents:
#+BEGIN_SRC nxml
    <?xml version = "1.0" encoding = "UTF-8" ?>
    <!-- 
    id : the mission ID - this isn't used in-code but is sometimes useful
    in debugging and testing.

    activeCheck : if this is set to true, when this mission is active,
    Hacknet will test for this mission being complete every frame, instead
    of only when the player responds to an email. This is very useful for
    creating delays, and for situations where the player is contacted from
    outside an existing chain.

    shouldIgnoreSenderVerification : This prevents the check to ensure
    that the player responded to the right sender when checking for
    mission completion.
    -->
    <mission id="testMission0" activeCheck="true"
    shouldIgnoreSenderVerification="false">
      <goals>
	<!-- All goals must be completed for mission completion -->
	<goal type="filedeletion" target="advExamplePC" file="asdf.txt"
	      path="home"/>

	<goal type="clearfolder" target="advExamplePC" path="home"/>

	<goal type="filedownload" target="advExamplePC" file="downloadFile.txt"
	      path="home"/>

	<goal type="filechange" target="advExamplePC" file="changeFile.txt"
	      path="home" keyword="extension"/>

	<goal type="filechange" target="advExamplePC" file="changeFile.txt"
	      path="home" keyword="data" removal="true" caseSensitive="true"/>

	<goal type="getadmin" target="advExamplePC"/>

	<goal type="getstring" target="password" />

	<goal type="delay" time="10.0"/>

	<goal type="hasflag" target="flagName"/>

	<goal type="fileupload" target="advExamplePC" file="asdf.txt" path="home"
	      destTarget="introFactionHomeNode" destPath="Drop/Uploads"/>

	<goal type="fileupload" target="advExamplePC" file="asdf2.dec" path="home"
	      destTarget="introFactionHomeNode" destPath="home" decrypt="true"
	      decryptPass="password"/>

	<!-- Task to add the degree matching the degree name and uni and
	     GPA details for the listed owner.

	     This task *requires* an academic server to exist.  An owner is defined
	     by name - to add a person to the simulation, define them in the People
	     folder and refer to them by name here.

	     The academic server must have the following properties:
	       1: ID must be "academic"
	       2: It must contain an Academic Database Daemon
	-->
	<goal type="AddDegree" owner="John Stalvern"
	      degree="Masters in Digital Security"
	      uni="Manchester University" gpa="3.0"/>

	<!-- Task to remove all degrees from the academic server for a
	     specified owner. Note that for this one, you *MUST* have the ID of
	     your database be "academic" or it wont find it.
	-->
	<goal type="wipedegrees" owner="John Stalvern"/>

	<!-- This is mostly useful for detecting sent medical records from
	     a medical database.  Medical records have the subject line:
	     "MedicalRecord - Lastname_Firstname"
	-->
	<goal type="sendemail" mailServer="jmail" recipient="mailuser123"
	      subject="Email Subject!"/>

	<!-- DLC Goals -->
	<goal type="getadminpasswordstring" target="advExamplePC"/>
      </goals>

      <missionStart val="7" suppress="true">changeSong</missionStart>
      <missionEnd val="1">addRank</missionEnd>

      <!-- The IsSilent flag is... admittedly in a terrible place here. It
	   silenced THIS mission, not the next one. This means that if you set
	   IsSilent to be true here, this mission will not send and email when it
	   is loaded.

	   Important detail about mission completion: For a reply to work,
	   the mission the player is currently on my have the same email sender
	   field as the email they reply to in their inbox. This means that if
	   you have a silent connector mission, make sure it has the same sender
	   filled in in the email field.

	   If you want there to be no mission following this one (For
	   example, the email mission that introduces you to a hub server) set
	   nextMission to "NONE"
      -->
      <nextMission IsSilent="false">NONE</nextMission>

      <!-- Next up are Branch missions (Optional)
      Note that the branch mission's email will not be sent - they are all
      loaded in silent mode.-->
      <branchMissions>
	<branch>Missions/BranchExample/TestBranchMission.xml</branch>
	<!-- You can have more than one branch mission here -->
      </branchMissions>
      <posting title="Do the Extension Test Mission" reqs="someCustomFlag"
	       requiredRank="3" >
    This is the body text of the posting that will appear when the
  mission is clicked on. It should contain a basic outline, with any
  warnings the player needs.  Once accepted, the email should contain
  full details.</posting>

      <email>
	<!-- The sender field is very important for branching or silent
	     mission chains. Even if this file you're editing isn't the
	     email on the server the player will be responding to, it
	     will still run it's completion checks as long as the player
	     is responding to any email from the same sender. This
	     doesn't affect basic and normal missions, so if you're not
	     doing anything too fancy, don't worry about it.-->
	<sender>Matt</sender>
	<subject>Test Mission Email</subject>
	<body>This is the body of the email.  be careful with your
  formatting! the hacknet parser does not account for
  auto-whitespace added to the left here.  email contents are very
  important - small changes in wording can dramatically change how
  easy or hard a mission is.  be very conscious about how much you
  are hinting at and guiding the player, and understand that it will
  be much harder for everyone that's not you.

  Good luck,
  -Matt
	</body>

	<attachments>
	  <note title="An example note">Experiment with note formatting!
  Remember that the note space is very small, so text overflow
  onto new lines happens quickly.

  Guide the player! Hacknet missions are very frustrating when the
  player has too little direction and cant continue.
	  </note>

	  <link comp="missionTestNode" />
	  <account comp="missionTestNode" user="TestUser" pass="testpass" />
	</attachments>
      </email>
    </mission>
#+END_SRC
* DONE Actions
  Actions can be triggered as:
  - MissionStart or MissionEnd functions
  - Faction rank progressing
  - ConditionalActionSets having a condition met
** Action List
*** RunFunction
     Runs a mission function - see Mission -> missionStart/missionEnd for the full list.
**** Attributes
     + FunctionName
       - The name of the mission function
     + FunctionValue
       - The "val" parameter of the mission function, in quotes.
**** Example
     #+BEGIN_SRC nxml
       <RunFunction FunctionName="changeSong" FunctionValue="6" />
     #+END_SRC
*** LoadMission
    Immediately loads a mission, replacing the current mission and sending the email.
**** Attributes
     + MissionName
       - A filepath to the new mission
**** Example
     #+BEGIN_SRC nxml
       <LoadMission MissionName="Missions/ExampleMission.xml" />
     #+END_SRC
*** AddAsset
    Creates a file with the listed content in the denoted location.
    This cannot create subfolders - the folder must already exist.
    For longer files, use CopyAsset and copy from a secret computer.
**** Attributes
     + FileName
       - The name of the file on the system
     + FileContents
       - The contents of the file
       - *Does not support multiple lines* - useful for wildcards
       - For longer files, use CopyAsset
     + TargetComp
       - The ID of the target computer
     + TargetFolderpath
       - The path to the folder into which the asset is added
**** Example
     #+BEGIN_SRC nxml
       <AddAsset
	   FileName="MemForensics.exe"
	   FileContents="#MEM_FORENSICS_EXE#"
	   TargetComp="advExamplePC"
	   TargetFolderpath="bin" />
     #+END_SRC
*** CopyAsset
    Copies a file from one computer to another.
    This cannot create subfolders - the folder must already exist.
    Also used for "creating" multi-line files if needed.
**** Attributes
     + DestFilePath
       - A filepath to the copied file on the destination computer
     + DestComp
       - The ID of the destination computer
     + SourceComp
       - The ID of the source computer
     + SourceFileName
       - The name of the file to be copied on the source computer
     + SourceFilePath
       - A filepath to the copied file on the source computer
**** Example
     #+BEGIN_SRC nxml
       <CopyAsset
	   DestFilePath="linkNode1"
	   DestComp="advExamplePC"
	   SourceComp="advExamplePC"
	   SourceFileName="Test_File.txt"
	   SourceFilePath="home" />
     #+END_SRC
*** AddMissionToHubServer
    Adds a new mission to the hub server.
    Supports missionHubServer, missionListingServer, and DHSDaemon servers.
**** Attributes
     + MissionFilepath
       - A filepath to the mission xml file to be added
     + TargetComp
       - The ID of the hub server
**** Example
     #+BEGIN_SRC nxml
       <AddMissionToHubServer
	   MissionFilepath="Missions/TestExtensionMission1.xml"
	   TargetComp="advExamplePC" />
     #+END_SRC
*** RemoveMissionFromHubServer
    Removes a mission from the hub server, if it exists.
    Supports missionHubServer, missionListingServer, and DHSDaemon servers.
**** Attributes
     + MissionFilepath
       - A filepath to the mission xml file to be removed
     + TargetComp
       - The ID of the hub server
**** Example
     #+BEGIN_SRC nxml
       <RemoveMissionFromHubServer
	   MissionFilepath="Missions/TestExtensionMission1.xml"
	   TargetComp="advExamplePC" />
     #+END_SRC
*** AddThreadToMissionBoard
    Adds a thread to a /el-style message board.
    The thread should be properly formatted in UTF-8 plaintext.
**** Attributes
     + ThreadFilepath
       - A filepath to the thread file
     + TargetComp
       - The ID of the message board
**** Example
     #+BEGIN_SRC nxml
       <AddThreadToMissionBoard
	   ThreadFilepath="Nodes/MessageBoardThreads/ExampleThread1.txt"
	   TargetComp="advExamplePC" />
     #+END_SRC
*** AddIRCMessage
    Adds a message to a DHSDaemon or IRCDaemon IRC.
    Use @#PLAYERNAME# to notify the player, and @channel to notify everyone.
    See the example for syntax on adding attachments as IRC messages.
**** Attributes
     + Author
       - The username of the person sending the message
     + TargetComp
       - The ID of the IRC server
     + Delay
       - The number of seconds until the post appears in the IRC
       - Use this functionality to chain messages at the start/end of a mission
**** Example
     #+BEGIN_SRC nxml
       <AddIRCMessage Author="HA0" TargetComp="advExamplePC" Delay="3.0">
       Hey @#PLAYERNAME# - check out the new asset that got added a few lines ago.
       </AddIRCMessage>

       <AddIRCMessage Author="DependableSkeleton" TargetComp="advExamplePC"
		      Delay="8.0">@channel this notifies everyone!</AddIRCMessage>

       <AddIRCMessage Author="P4rt1cul4rity" TargetComp="advExamplePC" Delay="3.0">
       !ATTACHMENT:note#%#Note Title#%#Note Content
       Note line 2
       etc</AddIRCMessage>

       <AddIRCMessage Author="P4rt1cul4rity" TargetComp="advExamplePC" Delay="3.0">
       !ATTACHMENT:link#%#ComputerName#%#123.123.123.123</AddIRCMessage>

       <AddIRCMessage Author="P4rt1cul4rity" TargetComp="advExamplePC" Delay="3.0">
	 !ATTACHMENT:account#%#TargetCompID#%#69.58.186.118#%#username#%#password
       </AddIRCMessage>
     #+END_SRC
*** CrashComputer
    Crashes the computer with TargetComp ID.
    If the target computer is the player's, it will bluescreen it instantly.
    Other computers will be removed from the netmap for ~15 seconds and DC the player.
    Leaves a log of who did it - use for secrets, generally, since people will rm * log folders.
**** Attributes
     + TargetComp
       - The ID of the target computer
     + CrashSource
       - The ID of the computer that caused the crash
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the crash occurs
**** Example
     #+BEGIN_SRC nxml
       <CrashComputer
	   TargetComp="linkNode1"
	   CrashSource="advExamplePC"
	   DelayHost="advExamplePC"
	   Delay="5.5" />
     #+END_SRC
*** DeleteFile
    Deletes a file from the target computer, doing nothing if the file does not exist.
**** Attributes
     + TargetComp
       - The ID of the target computer
     + FilePath
       - A filepath to the file to be removed
     + FileName
       - The name of the file to be removed
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the file is deleted
**** Example
     #+BEGIN_SRC nxml
       <DeleteFile
	   TargetComp="advExamplePC"
	   FilePath="bin"
	   FileName="Binary_File"
	   DelayHost="advExamplePC"
	   Delay="5.5"/>
     #+END_SRC
*** AddConditionalActions
    Loads in a new set of conditional actions from a file.
**** Attributes
     + Filepath
       - A filepath to the conditional action set xml file
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the conditional actions are added
**** Example
     #+BEGIN_SRC nxml
       <AddConditionalActions
	   ilepath="ExampleConditionalActionSet.xml"
	   DelayHost="advExamplePC"
	   Delay="5.5"/>
     #+END_SRC
*** SaveGame
    Saves the game for the player.
    Do this during extremely long missions without other save triggers!
**** Attributes
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the crash occurs
**** Example
     #+BEGIN_SRC nxml
       <SaveGame DelayHost="advExamplePC" Delay="20.5"/>
     #+END_SRC
*** LaunchHackScript
    Launches the Hacker script defined. Can be friend or foe.
    See the Hacker Scripts section for more details on the hacker script itself.
**** Attributes
     + Filepath
       - A filepath to the hacker script to be run
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the script launches
     + SourceComp
       - The ID or IP of the computer running the script
     + TargetComp
       - The ID or IP of the computer targeted by the script
     + RequireLogsOnSource
       - If true, the script only runs if the source computer has logs of activity by the player
     + RequireSourceIntact
       - If true, the script only runs if it has its networking file in /sys
**** Example
     #+BEGIN_SRC nxml
       <LaunchHackScript
	   Filepath="HackerScripts/ExampleHack.txt"
	   DelayHost="advExamplePC"
	   Delay="5.5"
	   SourceComp="advExamplePC"
	   TargetComp="playerComp"
	   RequireLogsOnSource="false"
	   RequireSourceIntact="true"/>
     #+END_SRC
*** SwitchToTheme
    Switches the player to the listed themes.
    Themes can be referenced directly (see Computer -> Files -> Wildcard List -> Main Game) or by a path to a custom theme file.
**** Attributes
     + ThemePathOrName
       - Either the direct name of the theme or a path to a custom theme
     + FlickerInDuration
       - How long it takes for the new theme to flicker into existence
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the theme transition begins
**** Example
     #+BEGIN_SRC nxml
       <SwitchToTheme
	   ThemePathOrName="Themes/ExampleTheme.xml"
	   FlickerInDuration="3.0"
	   DelayHost="advExamplePC"
	   Delay="15.5" />
     #+END_SRC
*** StartScreenBleedEffect
    Begins the screen bleed effect (as the end of the main game)
    Title and first three lines are shown in alert window.
    If the screenbleed effect ends, an action can be triggered.
**** Attributes
     + AlertTitle
       - The title associated with the screen bleed effect
     + CompleteAction
       - The filepath to an Action XML file
       - Runs if the screenbleed effect finishes normally
     + TotalDurationSeconds
       - How long the effect lasts
       - Also determines when CompleteAction will run
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the screenbleed begins
**** Example
     #+BEGIN_SRC nxml
       <StartScreenBleedEffect
	   AlertTitle="Title"
	   CompleteAction="Actions/HackerScriptActions.xml"
	   TotalDurationSeconds="12.5"
	   DelayHost="advExamplePC"
	   Delay="3.5">Line one
       Line two
       Line Three!</StartScreenBleedEffect>
     #+END_SRC
*** CancelScreenBleedEffect
    Kills an ongoing screenbleed effect.
**** Attributes
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the screenbleed ends
**** Example
     #+BEGIN_SRC nxml
       <CancelScreenBleedEffect DelayHost="advExamplePC" Delay="9.5" />
     #+END_SRC
*** AppendToFile
    Appends the tag's contents to the specified files.
    Useful for adding people to whitelists (#PLAYER_IP#)
**** Attributes
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the file is appended to
     + TargetComp
       - The ID of the target computer
     + TargetFolderpath
       - The folder in which the file is stored
     + TargetFilename
       - The name of the file to be appended to
**** Example
     #+BEGIN_SRC nxml
       <AppendToFile
	   DelayHost="advExamplePC"
	   Delay="12.5"
	   TargetComp="advExamplePC"
	   TargetFolderpath="Whitelist"
	   TargetFilename="list.txt">#PLAYER_IP#</AppendToFile>
     #+END_SRC
*** KillExe
    Kills all exes that contain the string mentioned.
    Useful for killing ESequencer (or shells by rival hacker)
**** Attributes
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the exe is killed
     + ExeName
       - A string contained in the exe name
       - Use * to kill all running programs
**** Example
     #+BEGIN_SRC nxml
       <KillExe DelayHost="advExamplePC" Delay="15.5" ExeName="ssh" />
     #+END_SRC
*** HideNode
    Hides the target computer node from the netmap if it's visible
**** Attributes
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the node is hidden
     + TargetComp
       - The ID of the computer to be hidden
**** Example
     #+BEGIN_SRC nxml
       <HideNode DelayHost="advExamplePC" Delay="15.5" TargetComp="advExamplePC" />
     #+END_SRC
*** GivePlayerUserAccount
    Reveals this user account to the player for the purpose of autocomplete
**** Attributes
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the player gains access to the account
     + TargetComp
       - The ID of the target computer
     + Username
       - The username of the account the player gains access to
**** Example
     #+BEGIN_SRC nxml
       <GivePlayerUserAccount
	   DelayHost="advExamplePC"
	   Delay="15.5"
	   TargetComp="advExamplePC"
	   Username="mailGuy" />
     #+END_SRC
*** ChangeIP
    Changes the IP of the target computer to the new address
**** Attributes
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the IP is changed
     + TargetComp
       - The ID of the computer whose IP is changed
     + NewIP
       - The new IP address for the target computer
       - Set to be blank or use #RANDOM_IP# for a random one
**** Example
     #+BEGIN_SRC nxml
       <ChangeIP
	   DelayHost="advExamplePC"
	   Delay="15.5"
	   TargetComp="advExamplePC"
	   NewIP="111.111.123.124" />
     #+END_SRC
*** HideAllNodes
    Hides all visible nodes from the netmap
**** Attributes
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the nodes are hidden
**** Example
     #+BEGIN_SRC nxml
       <HideAllNodes DelayHost="advExamplePC" Delay="21.5"/>
     #+END_SRC
*** ShowNode
    Reveals the target node on the netmap
**** Attributes
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the node is revealed
     + Target
       - The ID of the computer to be revealed
**** Example
     #+BEGIN_SRC nxml
       <ShowNode DelayHost="advExamplePC" Delay="21.5" Target="advExamplePC" />
     #+END_SRC
*** SetLock
    Locks a UI module, making it hidden/visible or not.
**** Attributes
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the module is locked
     + Module
       - The UI module being locked
       - Options:
	 * terminal
	 * ram
	 * netmap
	 * display
     + isLocked
       - Whether the module is locked
     + isHidden
       - Whether the module is hidden
**** Example
     #+BEGIN_SRC nxml
       <SetLock
	   DelayHost="advExamplePC"
	   Delay="21.5"
	   Module="terminal"
	   IsLocked="true"
	   IsHidden="false" />
     #+END_SRC
*** ChangeAlertIcon
    Changes the alert icon to point to a new server.
    Note that only Labyrinths can support anything other than a mail server.
    It can point to a mail server, a message board, or either type of IRC server.
**** Attributes
     + Target
       - The ID of the new server that will send notifications
     + Type
       - The type of server that is now being used
       - Options:
	 * mail
	 * irc
	 * irchub
	 * board
     + DelayHost
       - ID of a computer than can host delayable actions
       - Must be an IRCDaemon or DLCHubServer daemon computer OR FastActionHost
     + Delay
       - The number of seconds before the icon is changed
**** Example
     #+BEGIN_SRC nxml
       <ChangeAlertIcon
	   Target="advExamplePC"
	   Type="irc"
	   DelayHost="advExamplePC"
	   Delay="9.5"/>
     #+END_SRC
** ConditionalActionSets
   Conditional action sets can be loaded in two ways:
   1) AddConditionalActions action
   2) loadConditionalActions mission function
*** OnConnect
    Triggers when the player connects to the target PC.
**** Attributes
     + target
       - The ID of the machine to connect to
     + needsMissionComplete
       - Whether the mission needs to be complete 
     + requiredFlags
       - A list of any flags needed as well
**** Example
     #+BEGIN_SRC nxml
       <OnConnect
	   target="advExamplePC"
	   needsMissionComplete="true"
	   requiredFlags="decypher">
	   <!-- You can put any action that was described in the Actions section here -->
       </OnConnect>
     #+END_SRC
*** HasFlags
    Triggers when the player has all required flags.
**** Attributes
     + requiredFlags
       - A comma-separated list of necessary flags.
**** Example
     #+BEGIN_SRC nxml
       <HasFlags requiredFlags="decypher,otherFlag">
	   <!-- Actions here -->
       </HasFlags>
     #+END_SRC
*** OnAdminGained
    Triggers when the player achieves admin access to the target machine.
**** Attributes
     + target
       - The ID of the machine which requires admin access
**** Example
     #+BEGIN_SRC nxml
       <OnAdminGained target="advExamplePC">
	   <!-- Actions here -->
       </OnAdminGained>
     #+END_SRC
*** Instantly
    Triggers immediately.
    Actions occur in the order they appear in the file.
**** Attributes
     + needsMissionComplete
       - Whether the mission needs to be complete 
**** Example
     #+BEGIN_SRC nxml
       <Instantly>
	   <!-- Actions here -->
       </Instantly>

       <Instantly needsMissionComplete="true">
	   <!--You can also have the needs mission complete flag on instantly actions-->
	   <AddIRCMessage
	       Author="DependableSkeleton"
	       TargetComp="advExamplePC"
	       Delay="0.3">Second, if mission complete!</AddIRCMessage>
	 </Instantly>
     #+END_SRC
*** DoesNotHaveFlags
    Triggers when the player has none of the listed flags.
**** Attributes
     + Flags
       - A comma-separated list of flags the player must not have
**** Example
     #+BEGIN_SRC nxml
       <DoesNotHaveFlags Flags="SomeFlag,MoreFlags">
	   <!-- Actions here -->
       </DoesNotHaveFlags>
     #+END_SRC
*** OnDisconnect
    Triggers when the player disconnects from the machine.
    If target is unspecified or set to "NONE", triggers on any disconnect.
**** Attributes
     + target
       - The ID of the computer that the player must disconnect from
       - If unspecified or "NONE", allows any computer
**** Example
     #+BEGIN_SRC nxml
       <OnDisconnect target="advExamplePC">
	   <!--Actions here-->
       </OnDisconnect>
     #+END_SRC
*** Example 
    Hastebin link: https://hastebin.com/rodiyumepa.xml
    Simplified contents: 
    #+BEGIN_SRC nxml
      <ConditionalActions>
	<OnConnect target="advExamplePC" needsMissionComplete="true"
		   requiredFlags="decypher">
	  <AddIRCMessage Author="DependableSkeleton" TargetComp="advExamplePC"
			 Delay="2.1">
	  Hey, you're back, having just completed your mission.</AddIRCMessage>
	</OnConnect>

	<HasFlags requiredFlags="decypher,otherFlag">
	  <AddIRCMessage Author="DependableSkeleton"
			 TargetComp="advExamplePC"
			 Delay="0.1">has some flags!</AddIRCMessage>
	</HasFlags>

	<OnAdminGained target="advExamplePC">
	  <AddIRCMessage Author="DependableSkeleton"
			 TargetComp="advExamplePC"
			 Delay="2.1">
	  Wow, nice! You got admin on the example server.</AddIRCMessage>
	  </OnAdminGained>

	  <Instantly>
	    <AddIRCMessage Author="DependableSkeleton"
			   TargetComp="advExamplePC"
			   Delay="0.1">First!</AddIRCMessage>
	  </Instantly>

	  <DoesNotHaveFlags Flags="SomeFlag,MoreFlags">
	    <AddIRCMessage Author="DependableSkeleton"
			   TargetComp="advExamplePC"
			   Delay="0.1">doesn't have some other flags!</AddIRCMessage>
	  </DoesNotHaveFlags>

	  <OnDisconnect>
	    <AddIRCMessage Author="DependableSkeleton"
			   TargetComp="advExamplePC"
			   Delay="0.1">Disconnected!</AddIRCMessage>
	  </OnDisconnect>

      </ConditionalActions>
    #+END_SRC
* TODO Factions
** Example
   Pastebin link:
   Simplified contents:
   #+BEGIN_SRC nxml
	<CustomFaction name="Example Faction" id="examplefaction" playerVal="0">
       <!-- You can change the starting player value with the playerVal field above. -->
  
       <!-- A faction is basically just a few things:
       A name, a number representing the player's position in the faction,
       and a set of actions that can trigger to make changes to the game state in response to actions.-->

       <!-- The value required conditional action is the most basic one. This triggers once the player's value moves from below this number to equal to or more than it. -->
       <Action ValueRequired="1">
	 <!-- Runs a 'mission function' - for a list of these and how to use them, see the example mission file -->
	 <RunFunction FunctionName="changeSong" FunctionValue="6" />

	 <!-- Immediately loads a mission, replacing whatever's currently there and sending the email. -->
	 <LoadMission MissionName="Missions/ExampleMission.xml" />
    
	 <!-- Creates a file with the listed content on the computer with ID targetComp, in the folder path specified.
	 The folder specified must exist before this runs!
	 The file contents field here doesn't support newlines or super long content - this is recommended for just creating items with wildcard data (like programs)
	 For a complete list of wildcards, see the example computer file-->
	 <AddAsset FileName="MemForensics.exe" FileContents="#MEM_FORENSICS_EXE#" TargetComp="advExamplePC" TargetFolderpath="bin" />
  
	 <!-- This copies a file from one computer to another.
	 DestFilePath + DestComp are the DESTINATION computer - where the file will end up
	 SourceFileName, SourceFilePath and SourceComp are the SOURCE computer - where the file exists and is taken from
	 This will do nothing if the file does not exist to be copied.
    
	 This is very useful for adding complex files to a server after the session is created - create a new hidden server that's impossible to
	 find, define all the files you want on there, then copy them over to where you want later. -->
	 <CopyAsset DestFilePath="linkNode1" DestComp="advExamplePC" SourceComp="advExamplePC" SourceFileName="Test_File.txt" SourceFilePath="home" />
  
	 <!-- This adds a new mission to a hub server. This works for both missionHubServer servers (CSEC Style), missionListingServers (Entropy style)
	 and also DHSDaemon servers (Bibliotheque style)-->
	 <!-- CSEC Style: -->
	 <AddMissionToHubServer MissionFilepath="Missions/TestExtensionMission1.xml" TargetComp="advExamplePC" />
	 <!-- Bibliotheque Style: Assignment tag is who the mission starts assigned to of the server's user list. If this tag exists, the player cant claim the mission! -->
	 <!-- note that adding a mission to an entropy style server, you can set the AssignmentTag to be "top" to add to the top of the list. Otherwise it'll be added to the bottom.-->
	 <AddMissionToHubServer MissionFilepath="Missions/TestExtensionMission1.xml" TargetComp="advExamplePC" AssignmentTag="HA0"/>
    
	 <!-- This removes the mission from the hub server, if it exists. Works for all three specified above. -->
	 <RemoveMissionFromHubServer MissionFilepath="Missions/TestExtensionMission1.xml" TargetComp="advExamplePC" />
    
	 <!-- Adds a thread to a /el message board - thread file should be a UFT-8 plaintext document. -->
	 <AddThreadToMissionBoard ThreadFilepath="Nodes/MessageBoardThreads/ExampleThread1.txt" TargetComp="advExamplePC" />
    
	 <!-- Adds a message to a DHSDaemon or IRCDaemon IRC. Delay is seconds until the post appears. -->
	 <AddIRCMessage Author="HA0" TargetComp="advExamplePC" Delay="3.0">Hey @#PLAYERNAME# - check out the new asset that got added a few lines ago.</AddIRCMessage>
	 <AddIRCMessage Author="DependableSkeleton" TargetComp="advExamplePC" Delay="8.0">@channel this notifies everyone!</AddIRCMessage>
    
	 <!-- Crashes computer with the ID TargetComp. If this is "playerComp" it will crash the player's own computer (bluscreening it) instantly.
	 If it's another computer, this will remove it from the netmap for 15 seconds or so, and disconnect the player if they were connected to it.
	 The CrashSource is the ID of a computer that the crash log will point to.
	 NOTE: Players are very likely to rm * entire log folders, so don't make this part of any critical path - it's almost impossible to find. Secrets only!
    
	 ,**** DelayHost is the ID of a computer that can host delayable actions. Valid computers need to have one of these daemons on them:
	 IRCDaemon or DLCHubServer -->
	 <CrashComputer TargetComp="linkNode1" CrashSource="advExamplePC" DelayHost="advExamplePC" Delay="5.5" />
  
	 <!-- Deletes a file from the target computer. Does nothing if that file does not exist. -->
	 <DeleteFile TargetComp="advExamplePC" FilePath="bin" FileName="Binary_File" DelayHost="advExamplePC" Delay="5.5"/>
    
	 <!-- Loads in a new set of conditional actions from a file. Check out the file listed here for an explanation on what you can do with that -->
	 <AddConditionalActions Filepath="ExampleConditionalActionSet.xml" DelayHost="advExamplePC" Delay="5.5"/>
    
	 <!-- Loads in the Hacker script defined below to execute 5.5 seconds from now, coming from source advExamplePC and targeting playerComp (The player node ID).
	 These can target whatever you like, and be ally scripts! RequireLogsOnSource means that this will only execute if the source comp has logs on it from the player 
	 deleting, moving, or copying a file. You can use the ID or the IP for the source and target - either works.
	 RequireSourceIntact means that if the target is missing it's networking file from /sys, the hack wont happen. This means a crippled computer cant hack you back.-->
	 <LaunchHackScript Filepath="HackerScripts/ExampleHack.txt" DelayHost="advExamplePC" Delay="5.5" SourceComp="advExamplePC" TargetComp="playerComp" RequireLogsOnSource="false" RequireSourceIntact="true"/>
    
	 <!-- Switches to the listed theme. You can specify any of the core Hacknet themes by name directly :
	 TerminalOnlyBlack, HacknetBlue, HacknetTeal, HacknetYellow, HacknetWhite, HacknetPurple, HacknetMint, HackerGreen 
	 Or you can specify a path to a custom theme file.-->
	 <SwitchToTheme ThemePathOrName="Themes/ExampleTheme.xml" FlickerInDuration="3.0" DelayHost="advExamplePC" Delay="15.5" />

	 <!-- Starts a 'screen bleed' effect! This is where the red line moves down from the top of the screen dramatically
	 The title and the first 3 lines of the content of this tag are what's shown in the bottom left alert window.
	 The CompleteAction conditional action set is run *only if* the red hits the bottom of the screen and the player runs out of time.
	 "TotalDurationSeconds" is the total time it takes for the screen bleed to go from top to bottom.
    
	 I recommend syncing this up with various other conditions that allow you to cancel the effect if the player completes some task.-->
	 <StartScreenBleedEffect AlertTitle="Title" CompleteAction="Actions/HackerScriptActions.xml" TotalDurationSeconds="12.5" DelayHost="advExamplePC" Delay="3.5">Line one
     Line two
     Line Three!</StartScreenBleedEffect>

	 <!-- Cancels a screen bleed effect started with the tag above -->
	 <CancelScreenBleedEffect DelayHost="advExamplePC" Delay="9.5" />
    
	 <!-- Appends the content of the tag onto the file specified. Useful for adding extra data into things, making the world feel more dynamic, adding people to whitelists etc. -->
	 <AppendToFile DelayHost="advExamplePC" Delay="12.5" TargetComp="advExamplePC" TargetFolderpath="Whitelist" TargetFilename="list.txt">#PLAYER_IP#</AppendToFile>
  
	 <!-- Kills all exes that contain the string mentioned, or * for all.
	 This is case insensitive. So the following would kill "SSHCrackExe",
	 but changing it to "s" would kill all exes with an s in their name.
    
	 This is useful for doing things like killing ESequencer.exe once it's running,
	 or having a rival hacker close all of the player's shells.-->
	 <KillExe DelayHost="advExamplePC" Delay="15.5" ExeName="ssh" />
  
	 <!-- This is a big one - Changes the alert icon (top right) to point to a new server!
	 Target is the ID of the server it should connect to.
	 Type can be one of 4 options:
	 mail, irc, irchub, board
    
	 Mail is a mail server, like Jmail. If you use this, the mail server that it points to *MUST HAVE A MAIL ACCOUNT FOR THE PLAYER*
	 If it doesn't, it will crash when the player clicks on the icon and tries to go to their non-existent account.
    
	 irc is a standard IRC server. Whenever an IRC log with @#PLAYERNAME# or @Channel in it is added, the player will get a notification.
	 Labyrinths users only.
    
	 irchub is a DLCHubServer like Labyrinths uses. Labyrinths players only.
    
	 board is a /el style message board. Whenever a message or thread is added that contains any other the above IRC mention strings, the player will be notified.
    
	 IMPORTANT NOTE: Changing the type to anything other than mail is only supported with the Hacknet Labyrinths DLC installed.
	 -->
	 <ChangeAlertIcon Target="advExamplePC" Type="mail" DelayHost="advExamplePC" Delay="9.5"/>


	 <!-- Hides the target computer node from the netmap if it's visible -->
	 <HideNode DelayHost="advExamplePC" Delay="15.5" TargetComp="advExamplePC" />

	 <!-- Reveals this user account to the player so it's details show up in the autocomplete options when the player goes to log in. -->
	 <GivePlayerUserAccount DelayHost="advExamplePC" Delay="15.5" TargetComp="advExamplePC" Username="mailGuy" />
    
	 <!-- Changes the IP Address of the computer with ID in targetComp to the new IP address provided -->
	 <ChangeIP DelayHost="advExamplePC" Delay="15.5" TargetComp="advExamplePC" NewIP="111.111.123.124" />

	 <!-- Changes the player's netmap sorting method, as if they had used NetmapOrganizer. Valid methods are:
	 scatter,grid,seqgrid,CHAOS-->
	 <ChangeNetmapSortMethod DelayHost="advExamplePC" Delay="18.5" Method="grid" />

	 <!-- Saves the game! The player should be saved frequently, just incase their power dies or something. If you have extremely long missions
	 without email replies or any other save triggers, use this to keep the player saved and up to date.-->
	 <SaveGame DelayHost="advExamplePC" Delay="20.5"/>
    
       </Action>

  
       <!-- This action trigger as soon as the player is given the "decypher" flag -->
       <Action Flags="decypher">
	 <AddIRCMessage Author="DependableSkeleton" TargetComp="advExamplePC" Delay="8.0">decypher flag was added!</AddIRCMessage>
       </Action>

  
       <!-- And this one only triggers once both the player has the flag, and the score is greater than or equal to the required value -->
       <Action ValueRequired="5" Flags="decypher">
	  <AddIRCMessage Author="DependableSkeleton" TargetComp="advExamplePC" Delay="-8.0">negative delay adds it instantly, and backdates the time to make it all fit.</AddIRCMessage>
       </Action>


     </CustomFaction>
   #+END_SRC
   
* Miscellaneous
** Custom Themes
** Music
** People System
** Websites
** Replacing Jmail, ISP, Player
** Hacker Scripts
** Debug Commands
** Publishing to Steam Workshop
